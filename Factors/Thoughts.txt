
1.  Might it be worth adding an option that detects if recalculating an Outcome takes a 'long' time, 
    and if that Outcome is made unstable, check up the dependency graph to see if the parent that 
    originally dirtied it actually changed?
   
2.  Could we make a Recursive<T> class that keeps track of one or more of its previous values, so that the current value 
    could be based on the previous value?  i.e. An Outcome that returns its 'current' value + the value of another State.
    
    This could probably just be specified in the calculation process actually.
   
   
3.  Could we pass along a 'version ID' and use something similar to pins, to make it so that the value returned from an 
    Outcome is always whatever it was for that particular update?  Probably not worth it, but an interesting idea.
   
4.  An array of bits where each bit keeps track of whether a particular Outcome needs to be/is being recalculated.  
    Might be useful in multithreading?
   
   
5.  If we decide we don't like the performance of walking down the tree to find out if any nodes are Reflexive, and then 
    back up again to actually recalculate, we could try implement the 'Intersection' nodes we were brainstorming about, 
    where any if a Reactive depended on 2 or more parents instead of being tied directly to those parent States, we would 
    maintain a tree of Intersection nodes that represented the combination of any 2 given States, and Reactives would 
    subscribe to those instead.  It would cut down on the number of connections in cases where a lot of nodes share the same 
    parents.  It would also be really easy to give each Intersection an Id string that was a sequence of characters 
    representing the Id of each parent node you travel down to get to that node.  If we had that in place we could probably 
    rig it so that any time a Reactive wanted to set itself as Reflexive it would notify the Intersection node, that node 
    would add the Reactive to a HashSet containing all of the Reflexive dependents for that particular combination of states, 
    and then if that is the first Reflexive dependent the Intersection has, it can send its Id string to the root of the 
    tree so that it knows both that it has Reflexive dependents, and knows ahead of time what paths to take to get to them.
   
  
6.  If we ever decide to play with parallelism, red-green trees seem like an interesting option for creating 'immutable' 
    versions of a tree that the threads can share.
   

7.  If we end up recalculating too many Outcomes because they got marked as Unstable because they weren't Reflexive, 
    we could keep track of the states it depended on and their version numbers, and then when we go to recalculate we 
    can walk up the dependency tree to see if anything actually changed.
   
8.  What happens if someone makes a Reactive<Reactive<T>>?  What about a Proactive<Proactive<T>>?
    Thinking about why you would do this hurts my brain, but some things do come to mind.
    
    A Reactive<Reactor> might be useful if you want to be able to swap between Reactors that used different Processes,
    or different targets.  To use a Reactive<Reactor> instead of a Reactive<Process> it would have to be something where 
    it should only execute again if it something it uses has changed.
    
    Making a Reactive<Reactive> would allow you to create a field that Reactors that interacted with the generated Reactive 
    would only be be triggered by the outer Reactive if they got it directly from the outer Reactive.   
    
    If the inner Reactive was generated and then given to some other object, any Reactors that accessed the inner Reactive 
    through that object would form a dependency on the inner Reactive itself.  
    (This brings to mind immutability for some reason.)
    
    If the object you gave it to used a Reactor to get it, that Reactor could respond to changes in the outer Reactive 
    to get the new inner value when it changed.  But only the Reactors that got the inner Reactive directly from the 
    outer Reactive would notice the change.  This seems useful, but my brain hurts trying to think of what for.
    
    What about a Proactive<Reactive>, or a Reactive<Proactive>?
    
    
    9. We could make a 'ReactiveHistory' type that records the values of another Reactive, so that we can do 
    operations that 
    require us to analyze them.  For example if we have a Reactive<int> that generates somewhat fair 'random' numbers, each 
    time 
    the next number is generated we could look at the past 5 values and if they were all particularly low, we 
    could replace 
    the new number with something high.  (Whatever is using the random numbers would have to get the value from 
    the ReactiveHistory object, instead of the Reactive<int>. So that it would only see the replaced value. )
    
    
    10. A ReactiveOutput class, to write a given output to a Console/Whatever Else, whenever a value changes, a method 
    executes, etc.  Would work pretty great for logging.
    
    
    11. A ReactiveThread class that consists of a Thread that executes a given process whenever a specified event occurs.
        i.e. A thread that clears unused elements in a collection, if the element count gets above a certain number. 
        
  
    12. An option for Reactives to be 'Patient', causing them to wait till a Reactive is done updating 
        if they try to ge its value.
        

    13. An option for Reactives to update on a specific Thread, for Reactives that can only be updated on the UI Thread.
    
    
    14. An option for Reactives to run their calculations on a different Thread, if they currently on a particular Thread.
        For example having a Reactive that holds some state recalculate on a background thread if it was 
        accessed/invalidated on the UI Thread.  Prism has an enum they use to allow consumers to specify 
        whether an event should run on the UI thread, the publisher's thread, or a background thread.
        
        
    15. An option / type of Reactive, that returns its value asynchronously.
    
     
    16. If after creation a Reactive has no triggers, then by definition it can't change right?   
        Couldn't we just replace it with a regular value at that point?  
        Although it could be manually invalidated I guess.  Even if we think someone may manually 
        invalidated it, we could just check again after its invalidated.  If it now has 
        triggers, then replace the regular value, otherwise leave it.
        Hmm, even though the Reactive may have no triggers, it still has to be able to store 
        dependents that rely on it.
    
    
    17. Proactives/Reactives may be useful in creating a 'provider' class, similar to the one we had in the Core
        .Connector class.  We could set it up so that if one of the providers changes, everything using that provider 
        switches to the new one or recreates old objects using the new one.
    
    
    18. An option to make a Reactive, 'Inactive' which would stop it from updating until it was 'reactivated'.
    
    18. An option to 'Freeze' a Reactive which would stop it from updating permanently.  We could probably replace 
        most of the internals at that point with a simple value, since its guaranteed not to send out any change 
        notifications
    
    
    19. Can Reactives/Subscriptions have a queue of values, so that a in the case where Reactive sends out changes quickly, 
    the subscribers later in the chain of actions aren't stuck waiting on aan earlier subscriber whose action takes a long 
    time to finish?
    
    Individual changes are already queued by aren't they?  Each value change sends off the current chain to be handled by 
    the dispatcher, which should be asynchronous right?
    
  
    
    20. We could make a disposable Reactive method that waits for a condition and then executes once when it happens, and 
    then disposes of itself.  The Reactive could have a static List of instances in its class to retain references, and then 
    once the job executes just have it remove itself from the List and it gets garbage collected.  
    A sort of "Fire and Forget" type object.
  
    
    21. We should add a constructor to each of the reactive elements that takes just a Proactive element.  That we 
    can just make an Outcome that reads directly from the Proactive without having to worry about using the Observer 
    to track its parents.

    22. An abstract method that you can use to take some action when a Reactive gains its first dependent.
        In addition, we could have one for when the Factor loses its last dependent.   


    23. An Evaluator type Reactor that updates an out param, instead of/in addition to the return value.


    24. An 'ObservationBridge' class, used to connect multiple Observers so that a Reactor could monitor all of 
        them.  We might be able to use bits to represent which Observers are actively observing.  That way you
        could just read the int, and if it's zero you know no one's active, instead of having to check each 
        Observer individually.
        
    25. Are there any reasons a Reactor shouldn't run its update when NotifyInvolved is called? 
    
    26. What do we expect to happen if a Reaction is constructed, and before it updates for the first time, another 
        Reaction becomes its dependent/notifies it's involved.  Do we want the newly constructed one to run before it 
        establishes the dependency?

    27. //- TODO : Watching the video on Incremental made me think about the idea of making something similar to 
        //         their 'map' function for cases where the value of your Outcome is always determined using a specific 
        //         State/Factor, so you don't need a complicated system to track its parents, just something where every 
        //         time that State changes values, the Outcome passes the new value to its Process and sets its Value to
        //         the result of that Process.  Or we could see about attaching it to the Process directly, but
        //         not every value that comes from a process is used (such as values that are equal to the old value).

        // public static Outcome<T2> Map<T1, T2>(State<T1> valueSource, Func<T2, T1> process)
        // {
        //
        // }

        // public static Outcome<T3> Map2<T1, T2, T3>(State<T1> valueSource1, State<T2> valueSource2, Func<T3, T1, T2> process)
        // {
        //     
        // }

        //- I'm trying to understand the relationship between my Reactives and the 'Bind' method in the video.
        //  It seems like the biggest difference is that they don't have 'discovery'.  With their system you
        //  have to know all of the States/Factors ahead of time and feed them into the constructors.
        // public static Outcome<Outcome<T2>> Bind<T1, T2>(State<T1> valueSource, Func<Outcome<T2>, T1> process)
        // {
        //     
        // }
        
    28. I wonder if we could have Factors store their dependents in Priority order (maybe using that dual-key data 
        structure I saw earlier), so that when they updated them there would be no need for an update queue, since 
        they're already in the appropriate order.
        
    29. If a single change causes a dependent to be invalidated by one of its parents, and then again by another one 
        of its parents, then one of those parents depends on the other.  I wonder if we could use that to remove the 
        parent with higher priority, since we know any changes in it will propagate down to the onw with lower priority.
        
    30. What should happen if a Necessary subscriber adds itself to a triggered Reactor?




    Project Description 

    # Dexterity
    A reactive MVVM framework which allows ViewModels to monitor the data they depend on, and update their associated 
    Views automatically. Freeing you from having to write property change notifications, and allowing the components 
    to remain..

    The framework works by allowing users to declare factors when writing their code.  
    Factors can be 'proactive' or 'reactive' 

    Proactives
        Are independent of other factors
        Are used to determine the value of reactive elements.
        Their actions and changes cause other factors to respond.
  
    Reactives
        Depend on other factors to determine their value.
        Take note of other factors that are involved in determining their value or effect. 
        Recalculate their value when a factor they depend on changes.
  
    Examples 
      You can use a Reactive<int> to 
    
    Reactive<T> - An instance of type T who's value updates any time one of its...
    Reaction    - An Action that executes whenever a factor along its execution path changes.




    
 
    